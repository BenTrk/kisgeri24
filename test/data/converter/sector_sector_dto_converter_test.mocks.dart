// Mocks generated by Mockito 5.4.4 from annotations
// in kisgeri24/test/data/converter/sector_sector_dto_converter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i3;

import 'package:kisgeri24/data/converter/route_route_dto_converter.dart' as _i4;
import 'package:kisgeri24/data/dto/route_dto.dart' as _i2;
import 'package:kisgeri24/data/models/route.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRouteDto_0 extends _i1.SmartFake implements _i2.RouteDto {
  _FakeRouteDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConverter_1<S, T> extends _i1.SmartFake
    implements _i3.Converter<S, T> {
  _FakeConverter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_2<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RouteToRouteDtoConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteToRouteDtoConverter extends _i1.Mock
    implements _i4.RouteToRouteDtoConverter {
  @override
  _i2.RouteDto convert(_i5.Route? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _FakeRouteDto_0(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
        returnValueForMissingStub: _FakeRouteDto_0(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as _i2.RouteDto);

  @override
  _i3.Converter<_i5.Route, TT> fuse<TT>(
          _i3.Converter<_i2.RouteDto, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_1<_i5.Route, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
        returnValueForMissingStub: _FakeConverter_1<_i5.Route, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i3.Converter<_i5.Route, TT>);

  @override
  Sink<_i5.Route> startChunkedConversion(Sink<_i2.RouteDto>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_2<_i5.Route>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
        returnValueForMissingStub: _FakeSink_2<_i5.Route>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.Route>);

  @override
  _i6.Stream<_i2.RouteDto> bind(_i6.Stream<_i5.Route>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<_i2.RouteDto>.empty(),
        returnValueForMissingStub: _i6.Stream<_i2.RouteDto>.empty(),
      ) as _i6.Stream<_i2.RouteDto>);

  @override
  _i3.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_1<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeConverter_1<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i3.Converter<RS, RT>);
}
