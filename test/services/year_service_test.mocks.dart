// Mocks generated by Mockito 5.4.4 from annotations
// in kisgeri24/test/services/year_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:kisgeri24/data/converter/year_year_dto_converter.dart' as _i8;
import 'package:kisgeri24/data/dto/year_dto.dart' as _i3;
import 'package:kisgeri24/data/models/year.dart' as _i7;
import 'package:kisgeri24/data/repositories/year_repository.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeYearDto_1 extends _i1.SmartFake implements _i3.YearDto {
  _FakeYearDto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConverter_2<S, T> extends _i1.SmartFake
    implements _i4.Converter<S, T> {
  _FakeConverter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_3<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [YearRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockYearRepository extends _i1.Mock implements _i5.YearRepository {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i6.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.Year>> fetchAll() => (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Year>>.value(<_i7.Year>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i7.Year>>.value(<_i7.Year>[]),
      ) as _i6.Future<List<_i7.Year>>);

  @override
  _i6.Future<List<_i7.Year>> fetchAllByYear(String? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllByYear,
          [year],
        ),
        returnValue: _i6.Future<List<_i7.Year>>.value(<_i7.Year>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i7.Year>>.value(<_i7.Year>[]),
      ) as _i6.Future<List<_i7.Year>>);

  @override
  _i6.Future<void> save(_i7.Year? entity) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [entity],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> update(_i7.Year? entity) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [entity],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.Year?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i6.Future<_i7.Year?>.value(),
        returnValueForMissingStub: _i6.Future<_i7.Year?>.value(),
      ) as _i6.Future<_i7.Year?>);

  @override
  _i6.Future<_i7.Year?> getByTenant(String? tenantId) => (super.noSuchMethod(
        Invocation.method(
          #getByTenant,
          [tenantId],
        ),
        returnValue: _i6.Future<_i7.Year?>.value(),
        returnValueForMissingStub: _i6.Future<_i7.Year?>.value(),
      ) as _i6.Future<_i7.Year?>);
}

/// A class which mocks [YearToYearDtoConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockYearToYearDtoConverter extends _i1.Mock
    implements _i8.YearToYearDtoConverter {
  @override
  _i3.YearDto convert(_i7.Year? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _FakeYearDto_1(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
        returnValueForMissingStub: _FakeYearDto_1(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as _i3.YearDto);

  @override
  _i4.Converter<_i7.Year, TT> fuse<TT>(_i4.Converter<_i3.YearDto, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_2<_i7.Year, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
        returnValueForMissingStub: _FakeConverter_2<_i7.Year, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i4.Converter<_i7.Year, TT>);

  @override
  Sink<_i7.Year> startChunkedConversion(Sink<_i3.YearDto>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_3<_i7.Year>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
        returnValueForMissingStub: _FakeSink_3<_i7.Year>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i7.Year>);

  @override
  _i6.Stream<_i3.YearDto> bind(_i6.Stream<_i7.Year>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<_i3.YearDto>.empty(),
        returnValueForMissingStub: _i6.Stream<_i3.YearDto>.empty(),
      ) as _i6.Stream<_i3.YearDto>);

  @override
  _i4.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_2<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeConverter_2<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i4.Converter<RS, RT>);
}
