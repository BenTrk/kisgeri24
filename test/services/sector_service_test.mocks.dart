// Mocks generated by Mockito 5.4.4 from annotations
// in kisgeri24/test/services/sector_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_database/firebase_database.dart' as _i2;
import 'package:kisgeri24/data/models/sector.dart' as _i5;
import 'package:kisgeri24/data/repositories/sector_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseDatabase_0 extends _i1.SmartFake
    implements _i2.FirebaseDatabase {
  _FakeFirebaseDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SectorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSectorRepository extends _i1.Mock implements _i3.SectorRepository {
  @override
  _i2.FirebaseDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeFirebaseDatabase_0(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeFirebaseDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.FirebaseDatabase);

  @override
  _i4.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Sector>> fetchAll() => (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Sector>>.value(<_i5.Sector>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Sector>>.value(<_i5.Sector>[]),
      ) as _i4.Future<List<_i5.Sector>>);

  @override
  _i4.Future<List<_i5.Sector>> fetchAllByYear(String? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllByYear,
          [year],
        ),
        returnValue: _i4.Future<List<_i5.Sector>>.value(<_i5.Sector>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Sector>>.value(<_i5.Sector>[]),
      ) as _i4.Future<List<_i5.Sector>>);

  @override
  _i4.Future<_i5.Sector?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i4.Future<_i5.Sector?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.Sector?>.value(),
      ) as _i4.Future<_i5.Sector?>);

  @override
  _i4.Future<void> save(_i5.Sector? entity) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [entity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> update(_i5.Sector? entity) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [entity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
