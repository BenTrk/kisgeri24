// Mocks generated by Mockito 5.4.4 from annotations
// in kisgeri24/test/services/sector_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:convert' as _i2;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:kisgeri24/data/converter/sector_sector_dto_converter.dart'
    as _i5;
import 'package:kisgeri24/data/dto/route_dto.dart' as _i7;
import 'package:kisgeri24/data/dto/sector_dto.dart' as _i3;
import 'package:kisgeri24/data/models/route.dart' as _i6;
import 'package:kisgeri24/data/models/sector.dart' as _i8;
import 'package:kisgeri24/data/repositories/sector_repository.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConverter_0<S, T> extends _i1.SmartFake
    implements _i2.Converter<S, T> {
  _FakeConverter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSectorDto_1 extends _i1.SmartFake implements _i3.SectorDto {
  _FakeSectorDto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_2<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_3 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SectorToSectorDtoConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockSectorToSectorDtoConverter extends _i1.Mock
    implements _i5.SectorToSectorDtoConverter {
  @override
  _i2.Converter<_i6.Route, _i7.RouteDto> get routeConverter =>
      (super.noSuchMethod(
        Invocation.getter(#routeConverter),
        returnValue: _FakeConverter_0<_i6.Route, _i7.RouteDto>(
          this,
          Invocation.getter(#routeConverter),
        ),
        returnValueForMissingStub: _FakeConverter_0<_i6.Route, _i7.RouteDto>(
          this,
          Invocation.getter(#routeConverter),
        ),
      ) as _i2.Converter<_i6.Route, _i7.RouteDto>);

  @override
  _i3.SectorDto convert(_i8.Sector? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _FakeSectorDto_1(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
        returnValueForMissingStub: _FakeSectorDto_1(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as _i3.SectorDto);

  @override
  _i2.Converter<_i8.Sector, TT> fuse<TT>(
          _i2.Converter<_i3.SectorDto, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i8.Sector, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
        returnValueForMissingStub: _FakeConverter_0<_i8.Sector, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i8.Sector, TT>);

  @override
  Sink<_i8.Sector> startChunkedConversion(Sink<_i3.SectorDto>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_2<_i8.Sector>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
        returnValueForMissingStub: _FakeSink_2<_i8.Sector>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i8.Sector>);

  @override
  _i9.Stream<_i3.SectorDto> bind(_i9.Stream<_i8.Sector>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i9.Stream<_i3.SectorDto>.empty(),
        returnValueForMissingStub: _i9.Stream<_i3.SectorDto>.empty(),
      ) as _i9.Stream<_i3.SectorDto>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [SectorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSectorRepository extends _i1.Mock implements _i10.SectorRepository {
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_3(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_3(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);

  @override
  _i9.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i8.Sector>> fetchAll() => (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
        ),
        returnValue: _i9.Future<List<_i8.Sector>>.value(<_i8.Sector>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i8.Sector>>.value(<_i8.Sector>[]),
      ) as _i9.Future<List<_i8.Sector>>);

  @override
  _i9.Future<List<_i8.Sector>> fetchAllByYear(String? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllByYear,
          [year],
        ),
        returnValue: _i9.Future<List<_i8.Sector>>.value(<_i8.Sector>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i8.Sector>>.value(<_i8.Sector>[]),
      ) as _i9.Future<List<_i8.Sector>>);

  @override
  _i9.Future<_i8.Sector?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i9.Future<_i8.Sector?>.value(),
        returnValueForMissingStub: _i9.Future<_i8.Sector?>.value(),
      ) as _i9.Future<_i8.Sector?>);

  @override
  _i9.Future<void> save(_i8.Sector? entity) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [entity],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> update(_i8.Sector? entity) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [entity],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
